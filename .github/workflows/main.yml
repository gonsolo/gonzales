name: Prepare and build

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains three jobs, this one is called "prepare"
  prepare:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
 
      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cmake debhelper devscripts libembree-dev libopenimageio-dev
          version: 1.3.0

      - name: Cache Cuda
        id: cache-cuda
        uses: actions/cache@v3
        with:
          path: |
            cuda-ubuntu2204.pin
            cuda-repo-ubuntu2204-12-2-local_12.2.0-535.54.03-1_amd64.deb
          key: ${{ runner.os }}-cache-cuda

      - name: Download Cuda
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
          wget https://developer.download.nvidia.com/compute/cuda/12.2.0/local_installers/cuda-repo-ubuntu2204-12-2-local_12.2.0-535.54.03-1_amd64.deb

      - name: Install Cuda
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-ubuntu2204.pin
          sudo cp cuda-ubuntu2204.pin /etc/apt/preferences.d/cuda-repository-pin-600
          sudo dpkg -i cuda-repo-ubuntu2204-12-2-local_12.2.0-535.54.03-1_amd64.deb
          sudo cp /var/cuda-repo-ubuntu2204-12-2-local/cuda-*-keyring.gpg /usr/share/keyrings/
          sudo apt-get update
          sudo apt-get -y install cuda

      - name: Cache swift
        id: cache-swift
        uses: actions/cache@v3
        with:
          path: |
            swift-5.9-RELEASE-ubuntu22.04.tar.gz
          key: ${{ runner.os }}-cache-swift

      - name: Download swift
        if: steps.cache-swift.outputs.cache-hit != 'true'
        run: |
          wget https://download.swift.org/swift-5.9-release/ubuntu2204/swift-5.9-RELEASE/swift-5.9-RELEASE-ubuntu22.04.tar.gz

      - name: Install swift
        run: |
          tar xzf swift-5.9-RELEASE-ubuntu22.04.tar.gz

      - name: Install ptex
        run: |
          sudo dpkg -i External/Ptex/ptex_2.4.2-1ubuntu6_amd64.deb

          #- name: Compile debug
          #  run: |
          #    export PATH=$PATH:/usr/local/cuda/bin
          #    mkdir .build
          #    make debug

  # This is the second job called "build_debug"
  build_debug:
    runs-on: ubuntu-latest

    needs: prepare

    steps:
      - name: Compile debug
        run: |
          export PATH=$PATH:/usr/local/cuda/bin
          mkdir -p .build
          make debug

  # This is the third job called "build_release"
  build_release:
    runs-on: ubuntu-latest

    needs: prepare

    steps:
      - name: Compile release
        run: |
          export PATH=$PATH:/usr/local/cuda/bin
          mkdir -p .build
          make release
